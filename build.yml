name:  $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)  

trigger:
- master

variables:
  StatefileContext : $(System.TeamProject)_$(Build.DefinitionName)_$(Build.Repository.Name)_$(Build.SourceBranchName)
  Subscription : AzureSP
stages:
- stage: CI
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Create build artifact'
    pool: 'private'
    steps:
    - publish: $(System.DefaultWorkingDirectory)
      artifact: drop

- stage: CD  
  variables:
   - group: dev-variables
  displayName: 'Deploy'
  jobs:
  - deployment: dev
    environment: dev
    pool: 'windows-latest'
    strategy: 

      runOnce:
        preDeploy:
          steps:
          - download: current
            artifact: drop

        deploy:
          steps:
          - template: templates/terraform-steps.yml
            parameters:
              backendServiceArm : $(Subscription)
              workingDirectory: $(Pipeline.Workspace)/drop
              backendAzureRmResourceGroupName: $(Tf.ResourceGroup)
              backendAzureRmStorageAccountName: $(Tf.StorageAccount)
              backendAzureRmContainerName: $(Tf.Container)
              environment: 'dev'
              statefileContext: $(StatefileContext)
    
  - deployment: test
    environment: test
    pool: 'windows-latest'
    strategy: 

      runOnce:
        preDeploy:
          steps:
          - download: current
            artifact: drop

        deploy:
          steps:
          - template: templates/terraform-steps.yml
            parameters:
              backendServiceArm : $(Subscription)
              workingDirectory: $(Pipeline.Workspace)/drop
              backendAzureRmResourceGroupName: $(Tf.ResourceGroup)
              backendAzureRmStorageAccountName: $(Tf.StorageAccount)
              backendAzureRmContainerName: $(Tf.Container)
              environment: 'test'
              statefileContext: $(StatefileContext)

  - deployment: prod
      environment: prod
      pool: 'windows-latest'
      strategy: 

        runOnce:
          preDeploy:
            steps:
            - download: current
              artifact: drop

          deploy:
            steps:
            - template: templates/terraform-steps.yml
              parameters:
                backendServiceArm : $(Subscription)
                workingDirectory: $(Pipeline.Workspace)/drop
                backendAzureRmResourceGroupName: $(Tf.ResourceGroup)
                backendAzureRmStorageAccountName: $(Tf.StorageAccount)
                backendAzureRmContainerName: $(Tf.Container)
                environment: 'prod'
                statefileContext: $(StatefileContext)
