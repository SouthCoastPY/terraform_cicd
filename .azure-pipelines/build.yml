name:  $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)  

trigger:
- master

variables:
  Tf.Statefile : $(System.TeamProject)_$(Build.DefinitionName)_$(Build.Repository.Name)_$(Build.SourceBranchName)_terraform.tfstate
  Subscription : MSDN Enterprise
stages:
- stage: CI
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Create build artifact'
    pool:
      vmImage: 'private'
    steps:
    - publish: $(System.DefaultWorkingDirectory)
      artifact: drop

- stage: CD  
  variables:
   - group: dev-variables
  displayName: 'Deploy'
  jobs:
  - deployment: Deploy
    environment: dev
    pool:
      vmImage: 'private'
    strategy: 

      runOnce:
        preDeploy:
          steps:
          - download: current
            artifact: drop
            
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'gci $(Pipeline.Workspace) -recurse'

        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform 0.12.23'
            inputs:
              terraformVersion: 0.12.23

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              workingDirectory:  $(Pipeline.Workspace)/drop
              backendServiceArm: '$(Subscription)'
              backendAzureRmResourceGroupName: $(Tf.ResourceGroup)
              backendAzureRmStorageAccountName: $(Tf.StorageAccount)
              backendAzureRmContainerName: $(Tf.Container)
              backendAzureRmKey: $(Tf.Statefile)

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform plan'
            inputs:
              provider: 'azurerm'
              environmentServiceNameAzureRM: '$(Subscription)'
              command: 'plan'
              commandOptions: '-var-file=dev/config.tfvars -var=\"environment_name=dev\" -out=\"dev.plan\"'
              workingDirectory:  $(Pipeline.Workspace)/drop
     
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform apply'
            inputs:
              provider: 'azurerm'
              environmentServiceNameAzureRM: '$(Subscription)'
              command: 'apply'
              commandOptions: '\"dev.plan\"'
              workingDirectory:  $(Pipeline.Workspace)/drop